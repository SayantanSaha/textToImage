package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/fogleman/gg"
	"github.com/joho/godotenv"
)

func init() {
	// Load .env file
	if err := godotenv.Load(); err != nil {
		fmt.Println("No .env file found")
	}
}

var (
	// Configuration variables
	listenPort = getEnv("PORT", "8080")
	fontSize   = parseFloatEnv("FONT_SIZE", 24)
	fontPath   = getEnv("FONT_PATH", "./HackNerdFont-Bold.ttf")
)

func textToImageHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Only GET method is allowed", http.StatusMethodNotAllowed)
		return
	}

	// Extracting text from the URL path, assuming the URL is like /text-to-image/{text}
	// Split the URL path and extract the text part
	parts := strings.SplitN(r.URL.Path, "/text-to-image/", 2)
	if len(parts) != 2 || parts[1] == "" {
		http.Error(w, "Text must be provided in the URL path", http.StatusBadRequest)
		return
	}
	text := parts[1]

	// Create an image with the text with a transparent background

	const padding = 20
	dc := gg.NewContext(100, 100)
	width, height := dc.MeasureString(text)
	width += 2 * padding  // Add padding to the width
	height += 2 * padding // Add padding to the height

	if err := dc.LoadFontFace(fontPath, fontSize); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	dc = gg.NewContext(int(width), int(height)) // Adding a little padding
	dc.SetRGBA(0, 0, 0, 0)                      // Transparent background
	dc.Clear()
	dc.SetRGB(0, 0, 0) // Black text
	dc.DrawStringAnchored(text, width/2, height/2, 0.5, 0.5)
	dc.Clip()

	// Write the image to the response
	w.Header().Set("Content-Type", "image/png")
	dc.EncodePNG(w)
}

func main() {
	http.HandleFunc("/text-to-image/", textToImageHandler)

	logMessage(fmt.Sprintf("Listening on port %s", listenPort))
	if err := http.ListenAndServe(":"+listenPort, nil); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}
func logRequest(r *http.Request, text string) {
	logMessage(fmt.Sprintf("Request: %s, Path: %s", text, r.URL.Path))
}

func logResponse(text string, width, height int) {
	logMessage(fmt.Sprintf("Response: %s, Image Size: %dx%d", text, width, height))
}

func logMessage(message string) {
	log.Printf("[%s] %s", time.Now().Format("2006-01-02 15:04:05"), message)
}

func getEnv(key, fallback string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	return fallback
}

func parseFloatEnv(key string, fallback float64) float64 {
	if value, exists := os.LookupEnv(key); exists {
		if floatValue, err := strconv.ParseFloat(value, 64); err == nil {
			return floatValue
		}
	}
	return fallback
}
